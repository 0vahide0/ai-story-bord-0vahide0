import React, { createContext, useState, useContext, ReactNode } from 'react';

type Language = 'en' | 'fa';

const translations = {
  en: {
    appTitle: "Storyboard AI",
    stepBrainstorm: "Brainstorm Idea",
    stepEdit: "Edit Structure",
    stepCreate: "Create Storyboard",
    stepProduce: "Produce Video",
    ideaInputTitle: "Turn Your Idea into a Visual Story",
    ideaInputSubtitle: "Start with a single sentence. Our AI will help you brainstorm a structure, write scenes, and generate a full storyboard.",
    ideaInputPlaceholder: "e.g., A robot who wants to be a baker in 1920s Paris...",
    trySampleIdea: "Try a sample idea",
    generating: "Generating",
    generateStory: "Generate Story",
    sampleIdeas: [
        "A cat astronaut explores a planet made entirely of cheese.",
        "A shy librarian discovers a book that writes back to her.",
        "Two rival coffee shops on the same street compete by using magic.",
        "A detective in a futuristic city solves crimes with his robot corgi.",
    ],
    structureEditorTitle: "Refine Your Story's Blueprint",
    structureEditorSubtitle: "The AI has created a starting point. Edit the scenes below, or use the AI Assistant to help.",
    title: "Title",
    logline: "Logline",
    scenes: "Scenes",
    scene: "Scene",
    scenePlaceholder: "Describe what happens in this scene...",
    addScene: "Add Scene",
    removeScene: "Remove scene",
    back: "Back",
    createStoryboard: "Create Storyboard",
    aiAssistant: "AI Assistant",
    aiAssistantHint: "Click on a scene's text box to activate editing tools.",
    rewrite: "Rewrite",
    expand: "Expand",
    shrink: "Shrink",
    changeTone: "Change Tone",
    toneDefault: "more dramatic",
    tonePlaceholder: "e.g., comedic, tense...",
    apply: "Apply",
    myStoryboard: "My Storyboard",
    aspectRatio: "Aspect Ratio",
    aspectRatioWidescreen: "Widescreen",
    aspectRatioSquare: "Square",
    aspectRatioVertical: "Vertical",
    aspectRatioClassic: "Classic TV",
    aspectRatioPortrait: "Portrait",
    startNewStory: "Start New Story",
    globalImageStyle: "Global Image Style",
    globalImageStylePlaceholder: "e.g., cinematic, 8k, dramatic lighting...",
    styleCinematic: "Cinematic",
    styleAnime: "Anime",
    styleClaymation: "Claymation",
    styleVintageComic: "Vintage Comic",
    proceedToProduction: "Proceed to Video Production",
    completeAllScenes: "Generate all scenes first to proceed",
    statusReady: "Ready to Generate",
    statusScripting: "Writing Script...",
    statusPrompting: "Creating Prompt...",
    statusImaging: "Generating Image...",
    statusVideo: "Generating Video...",
    statusTtsGenerating: "Generating Audio...",
    statusMusicGenerating: "Composing Music...",
    statusComplete: "Complete",
    statusError: "Error",
    generateScene: "Generate Scene",
    sceneDescription: "Scene Description",
    script: "Script",
    scriptPlaceholder: "Script will be generated here...",
    speech: "Speech",
    speechPlaceholder: "Enter or edit text for speech generation...",
    listenToScript: "Listen to Script",
    imagePrompt: "Image Prompt",
    generateVideo: "Generate Video Clip",
    regenerateVideo: "Regenerate Video",
    viewVideo: "View Generated Video",
    productionStudioTitle: "Production Studio",
    productionStudioSubtitle: "Bring your scenes to life by generating video and music. Select a scene, refine the prompts, and create.",
    videoPrompt: "Video Prompt",
    videoPromptPlaceholder: "Edit the prompt to guide the video generation...",
    videoModel: "Video Model",
    selectScenePrompt: "Select a scene from the left to begin.",
    videoGenerationStatus: "Video Generation Status",
    videoGenerationError: "Video Generation Error",
    musicAssistant: "Music Assistant",
    musicPrompt: "Music Prompt",
    musicPromptPlaceholder: "e.g., a mysterious and slow piano melody...",
    generateMusic: "Generate Music",
    regenerateMusic: "Regenerate Music",
    selectSceneForMusic: "Select a scene to work on its music.",
    uploadImage: "Upload Image",
    clearImage: "Clear Image",
    error: "Error",
    success: "Success!",
    errorEnterIdea: "Please enter an idea.",
    errorInvalidStructure: "The AI failed to return a valid story structure. Please try a different idea or rephrase your current one.",
    errorUnknown: "An unknown error occurred.",
    errorFailedStructure: "Failed to generate story structure.",
    noDescription: "No description provided.",
    errorDuringGeneration: "An error occurred during generation.",
    errorRegenerateImage: "Failed to regenerate image.",
    errorGenerateVideo: "Failed to generate video.",
    generateAudio: "Generate Audio",
    regenerateAudio: "Regenerate Audio",
    selectVoice: "Select Voice",
    errorGenerateAudio: "Failed to generate audio.",
    errorGenerateMusic: "Failed to generate music.",
    audioPlayerNotSupported: "Your browser does not support the audio element.",
    systemPromptsTitle: "System Prompts Management",
    systemPromptsSubtitle: "Fine-tune the AI's behavior by editing the core instructions for each step.",
    promptStoryStructure: "Story Structure Generation",
    promptScript: "Script Generation",
    promptImage: "Image Prompt Generation",
    promptVideo: "Video Generation",
    promptTts: "Text-to-Speech (TTS)",
    promptMusic: "Music Generation",
    promptRewrite: "Rewrite Text (AI Assistant)",
    promptExpand: "Expand Text (AI Assistant)",
    promptShrink: "Shrink Text (AI Assistant)",
    promptChangeTone: "Change Tone (AI Assistant)",
  },
  fa: {
    appTitle: "هوش مصنوعی استوری‌بورد",
    stepBrainstorm: "ایده‌پردازی",
    stepEdit: "ویرایش ساختار",
    stepCreate: "ساخت استوری‌بورد",
    stepProduce: "تولید ویدیو",
    ideaInputTitle: "ایده خود را به یک داستان تصویری تبدیل کنید",
    ideaInputSubtitle: "با یک جمله شروع کنید. هوش مصنوعی ما به شما در ایده‌پردازی ساختار، نوشتن صحنه‌ها و تولید یک استوری‌بورد کامل کمک می‌کند.",
    ideaInputPlaceholder: "مثلاً: رباتی که می‌خواهد در پاریس دهه ۱۹۲۰ یک نانوا باشد...",
    trySampleIdea: "یک ایده نمونه را امتحان کنید",
    generating: "در حال تولید",
    generateStory: "تولید داستان",
    sampleIdeas: [
        "یک فضانورد گربه سیاره‌ای را که کاملاً از پنیر ساخته شده کاوش می‌کند.",
        "یک کتابدار خجالتی کتابی را پیدا می‌کند که به او پاسخ می‌دهد.",
        "دو کافی‌شاپ رقیب در یک خیابان با استفاده از جادو با هم رقابت می‌کنند.",
        "یک کارآگاه در شهری آینده‌نگر با سگ رباتیک خود جرایم را حل می‌کند.",
    ],
    structureEditorTitle: "طرح کلی داستان خود را اصلاح کنید",
    structureEditorSubtitle: "هوش مصنوعی یک نقطه شروع ایجاد کرده است. صحنه‌های زیر را ویرایش کنید یا از دستیار هوش مصنوعی کمک بگیرید.",
    title: "عنوان",
    logline: "لاگ‌لاین (خلاصه تک‌خطی)",
    scenes: "صحنه‌ها",
    scene: "صحنه",
    scenePlaceholder: "توضیح دهید در این صحنه چه اتفاقی می‌افتد...",
    addScene: "افزودن صحنه",
    removeScene: "حذف صحنه",
    back: "بازگشت",
    createStoryboard: "ایجاد استوری‌بورد",
    aiAssistant: "دستیار هوش مصنوعی",
    aiAssistantHint: "برای فعال کردن ابزارهای ویرایش، روی کادر متنی یک صحنه کلیک کنید.",
    rewrite: "بازنویسی",
    expand: "گسترش",
    shrink: "خلاصه‌سازی",
    changeTone: "تغییر لحن",
    toneDefault: "دراماتیک‌تر",
    tonePlaceholder: "مثلاً: کمدی، پرتنش...",
    apply: "اعمال",
    myStoryboard: "استوری‌بورد من",
    aspectRatio: "نسبت تصویر",
    aspectRatioWidescreen: "عریض (Widescreen)",
    aspectRatioSquare: "مربع (Square)",
    aspectRatioVertical: "عمودی (Vertical)",
    aspectRatioClassic: "تلویزیون کلاسیک (Classic)",
    aspectRatioPortrait: "پرتره (Portrait)",
    startNewStory: "شروع داستان جدید",
    globalImageStyle: "سبک تصویر کلی",
    globalImageStylePlaceholder: "مثلاً: سینمایی، 8k، نورپردازی دراماتیک...",
    styleCinematic: "سینمایی",
    styleAnime: "انیمه",
    styleClaymation: "خمیری (Claymation)",
    styleVintageComic: "کمیک قدیمی",
    proceedToProduction: "رفتن به مرحله تولید ویدیو",
    completeAllScenes: "برای ادامه، ابتدا تمام صحنه‌ها را تولید کنید",
    statusReady: "آماده تولید",
    statusScripting: "در حال نوشتن فیلمنامه...",
    statusPrompting: "در حال ایجاد دستور...",
    statusImaging: "در حال تولید تصویر...",
    statusVideo: "در حال تولید ویدیو...",
    statusTtsGenerating: "در حال تولید صدا...",
    statusMusicGenerating: "در حال ساخت موسیقی...",
    statusComplete: "کامل شد",
    statusError: "خطا",
    generateScene: "تولید صحنه",
    sceneDescription: "توضیحات صحنه",
    script: "فیلمنامه",
    scriptPlaceholder: "فیلمنامه در اینجا تولید خواهد شد...",
    speech: "گفتار",
    speechPlaceholder: "متن برای تولید گفتار را وارد یا ویرایش کنید...",
    listenToScript: "گوش دادن به متن",
    imagePrompt: "دستور تولید تصویر",
    generateVideo: "تولید کلیپ ویدیویی",
    regenerateVideo: "تولید مجدد ویدیو",
    viewVideo: "مشاهده ویدیوی تولید شده",
    productionStudioTitle: "استودیوی تولید",
    productionStudioSubtitle: "با تولید ویدیو و موسیقی به صحنه‌های خود جان ببخشید. یک صحنه را انتخاب کنید، دستورها را اصلاح کنید و بسازید.",
    videoPrompt: "دستور تولید ویدیو",
    videoPromptPlaceholder: "برای هدایت تولید ویدیو، دستور را ویرایش کنید...",
    videoModel: "مدل ویدیو",
    selectScenePrompt: "برای شروع، یک صحنه را از سمت چپ انتخاب کنید.",
    videoGenerationStatus: "وضعیت تولید ویدیو",
    videoGenerationError: "خطای تولید ویدیو",
    musicAssistant: "دستیار موسیقی",
    musicPrompt: "دستور تولید موسیقی",
    musicPromptPlaceholder: "مثلاً: یک ملودی پیانوی مرموز و آهسته...",
    generateMusic: "تولید موسیقی",
    regenerateMusic: "تولید مجدد موسیقی",
    selectSceneForMusic: "برای کار بر روی موسیقی، یک صحنه انتخاب کنید.",
    uploadImage: "آپلود تصویر",
    clearImage: "پاک کردن تصویر",
    error: "خطا",
    success: "موفقیت!",
    errorEnterIdea: "لطفاً یک ایده وارد کنید.",
    errorInvalidStructure: "هوش مصنوعی نتوانست ساختار داستانی معتبری بازگرداند. لطفاً ایده دیگری را امتحان کنید یا ایده فعلی خود را بازنویسی کنید.",
    errorUnknown: "یک خطای ناشناخته رخ داد.",
    errorFailedStructure: "تولید ساختار داستان ناموفق بود.",
    noDescription: "هیچ توضیحی ارائه نشده است.",
    errorDuringGeneration: "هنگام تولید خطایی رخ داد.",
    errorRegenerateImage: "تولید مجدد تصویر ناموفق بود.",
    errorGenerateVideo: "تولید ویدیو ناموفق بود.",
    generateAudio: "تولید صدا",
    regenerateAudio: "تولید مجدد صدا",
    selectVoice: "انتخاب صدا",
    errorGenerateAudio: "تولید صدا ناموفق بود.",
    errorGenerateMusic: "تولید موسیقی ناموفق بود.",
    audioPlayerNotSupported: "مرورگر شما از پخش کننده صوتی پشتیبانی نمی‌کند.",
    systemPromptsTitle: "مدیریت دستورات سیستمی",
    systemPromptsSubtitle: "رفتار هوش مصنوعی را با ویرایش دستورالعمل‌های اصلی برای هر مرحله تنظیم کنید.",
    promptStoryStructure: "تولید ساختار داستان",
    promptScript: "تولید فیلمنامه",
    promptImage: "تولید دستور تصویر",
    promptVideo: "تولید ویدیو",
    promptTts: "تبدیل متن به گفتار (TTS)",
    promptMusic: "تولید موسیقی",
    promptRewrite: "بازنویسی متن (دستیار AI)",
    promptExpand: "گسترش متن (دستیار AI)",
    promptShrink: "خلاصه کردن متن (دستیار AI)",
    promptChangeTone: "تغییر لحن (دستیار AI)",
  }
};

type Translations = typeof translations.en;
type SampleIdeasKey = 'sampleIdeas';
type StringKey = Exclude<keyof Translations, SampleIdeasKey>;

interface TFunction {
  (key: SampleIdeasKey): string[];
  (key: StringKey): string;
}

interface LanguageContextType {
  language: Language;
  setLanguage: (language: Language) => void;
  t: TFunction;
}

export const LanguageContext = createContext<LanguageContextType>({
  language: 'en',
  setLanguage: () => {},
  t: ((key: keyof Translations) => {
    if (key === 'sampleIdeas') return [];
    return '';
  }) as TFunction,
});

export const LanguageProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [language, setLanguage] = useState<Language>('en');

  const t = (key: keyof Translations) => {
    return translations[language][key] || translations.en[key];
  };

  return React.createElement(LanguageContext.Provider, {
    value: { language, setLanguage, t: t as TFunction }
  }, children);
};

export const useTranslations = () => {
  const context = useContext(LanguageContext);
  if (!context) {
    throw new Error('useTranslations must be used within a LanguageProvider');
  }
  return { t: context.t };
};